#!/usr/bin/env python
"""Populate the Scoring Engine database with default or example data."""

from __future__ import annotations

import argparse
import os
from datetime import datetime, timedelta
from random import choice, randint, sample

from scoring_engine.competition import Competition
from scoring_engine.config import config
from scoring_engine.db import delete_db, init_db, session, verify_db_ready
from scoring_engine.engine.basic_check import (
    CHECK_FAILURE_TEXT,
    CHECK_SUCCESS_TEXT,
    CHECK_TIMED_OUT_TEXT,
)
from scoring_engine.logger import logger
from scoring_engine.models.check import Check
from scoring_engine.models.flag import Flag, Solve
from scoring_engine.models.inject import Inject, Template
from scoring_engine.models.notifications import Notification
from scoring_engine.models.round import Round
from scoring_engine.models.service import Service
from scoring_engine.models.setting import Setting
from scoring_engine.models.team import Team
from scoring_engine.version import version


ABOUT_CONTENT = """
<h4>Use the following credentials to login</h4>
<ul>
    <li>whiteteamuser:testpass</li>
    <li>redteamuser:testpass</li>
    <li>team1user1:testpass</li>
    <li>team2user1:testpass</li>
    <li>...</li>
    <li>team10user1:testpass</li>
</ul>"""

WELCOME_CONTENT = """
<div class="row">
    <h1 class="text-center">Diamond Sponsors</h1>
</div>
<div class="row">
    <div class="col-xs-12 col-md-4">
        <div class="card">
            <img class='center-block' src="static/images/logo-placeholder.jpg" alt="sponsor image placeholder">
        </div>
    </div>
    <div class="col-xs-12 col-md-4">
        <div class="card">
            <img class='center-block' src="static/images/logo-placeholder.jpg" alt="sponsor image placeholder">
        </div>
    </div>
    <div class="col-xs-12 col-md-4">
        <div class="card">
            <img class='center-block' src="static/images/logo-placeholder.jpg" alt="sponsor image placeholder">
        </div>
    </div>
</div>
<div class="row">
    <h1 class="text-center">Platinum Sponsors</h1>
</div>
<div class="row">
    <div class="col-xs-12 col-md-4">
        <div class="card">
            <img class='center-block' src="static/images/logo-placeholder.jpg" alt="sponsor image placeholder">
        </div>
    </div>
    <div class="col-xs-12 col-md-4">
        <div class="card">
            <img class='center-block' src="static/images/logo-placeholder.jpg" alt="sponsor image placeholder">
        </div>
    </div>
    <div class="col-xs-12 col-md-4">
        <div class="card">
            <img class='center-block' src="static/images/logo-placeholder.jpg" alt="sponsor image placeholder">
        </div>
    </div>
</div>
<div class="row">
    <h1 class="text-center">Gold Sponsors</h1>
</div>
<div class="row">
    <div class="col-xs-12 col-md-4">
        <div class="card">
            <img class='center-block' src="static/images/logo-placeholder.jpg" alt="sponsor image placeholder">
        </div>
    </div>
    <div class="col-xs-12 col-md-4">
        <div class="card">
            <img class='center-block' src="static/images/logo-placeholder.jpg" alt="sponsor image placeholder">
        </div>
    </div>
    <div class="col-xs-12 col-md-4">
        <div class="card">
            <img class='center-block' src="static/images/logo-placeholder.jpg" alt="sponsor image placeholder">
        </div>
    </div>
</div>
"""


def build_argument_parser() -> argparse.ArgumentParser:
    """Create the command line argument parser for the setup script."""

    parser = argparse.ArgumentParser(
        description="Initialise the database with default settings and optional example data.",
    )
    parser.add_argument(
        "--overwrite-db",
        action="store_true",
        help="Drop and recreate the database even if it already exists.",
    )
    parser.add_argument(
        "--example",
        action="store_true",
        help="Populate the database with randomly generated example data.",
    )
    return parser


def str_to_bool(value: str) -> bool:
    """Return True when *value* represents a truthy string."""

    return str(value).strip().lower() == "true"


def apply_environment_overrides(args: argparse.Namespace) -> None:
    """Apply environment variable overrides to the parsed arguments."""

    example_env = os.getenv("SCORINGENGINE_EXAMPLE")
    if example_env and str_to_bool(example_env):
        args.overwrite_db = True
        args.example = True

    overwrite_env = os.getenv("SCORINGENGINE_OVERWRITE_DB")
    if overwrite_env:
        overwrite_env = overwrite_env.strip().lower()
        if overwrite_env in {"true", "false"}:
            args.overwrite_db = overwrite_env == "true"
        else:
            logger.warning(
                "Ignoring invalid SCORINGENGINE_OVERWRITE_DB value '%s'. Expected 'true' or 'false'.",
                overwrite_env,
            )


def ensure_database_state(overwrite_db: bool) -> None:
    """Abort when the database exists and overwrite was not requested."""

    if overwrite_db:
        return

    if verify_db_ready(session):
        logger.error(
            "Exiting script and not overwriting db...must use --overwrite-db to overwrite data.",
        )
        raise SystemExit(1)

    logger.debug("Database doesn't exist yet...")


def load_competition_configuration() -> None:
    """Load the default competition definition into the database."""

    logger.info("Setting up DB")
    delete_db(session)
    init_db(session)

    competition_config_file = os.path.join(
        os.path.dirname(os.path.abspath(__file__)),
        "competition.yaml",
    )
    with open(competition_config_file, "r", encoding="utf-8") as competition_config:
        sample_competition_str = competition_config.read()

    competition = Competition.parse_yaml_str(sample_competition_str)
    competition.save(session)


def create_default_settings() -> None:
    """Persist the default settings required for a fresh installation."""

    logger.info("Creating the default Settings")
    session.add(Setting(name="about_page_content", value=ABOUT_CONTENT))
    session.add(Setting(name="welcome_page_content", value=WELCOME_CONTENT))
    session.add(Setting(name="target_round_time", value=config.target_round_time))
    session.add(Setting(name="worker_refresh_time", value=config.worker_refresh_time))
    session.add(Setting(name="engine_paused", value=config.engine_paused))
    session.add(Setting(name="pause_duration", value=config.pause_duration))
    session.add(Setting(name="blue_team_update_hostname", value=config.blue_team_update_hostname))
    session.add(Setting(name="blue_team_update_port", value=config.blue_team_update_port))
    session.add(
        Setting(
            name="blue_team_update_account_usernames",
            value=config.blue_team_update_account_usernames,
        )
    )
    session.add(
        Setting(
            name="blue_team_update_account_passwords",
            value=config.blue_team_update_account_passwords,
        )
    )
    session.add(Setting(name="blue_team_view_check_output", value=config.blue_team_view_check_output))
    session.add(Setting(name="agent_checkin_interval_sec", value=config.target_round_time // 5))
    session.add(Setting(name="agent_show_flag_early_mins", value=config.agent_show_flag_early_mins))
    session.add(Setting(name="agent_psk", value=config.agent_psk))
    session.commit()


def simulate_rounds() -> None:
    """Populate the database with example round data."""

    num_rounds = randint(200, 250)
    logger.info("Simulating %s rounds", num_rounds)
    services = session.query(Service).all()
    for num_round in range(1, num_rounds + 1):
        round_obj = Round(
            number=num_round,
            round_start=datetime.now() - timedelta(hours=randint(0, 24), minutes=randint(0, 60)),
            round_end=datetime.now() + timedelta(hours=randint(0, 24), minutes=randint(0, 60)),
        )
        logger.debug(
            "Round %s spans %s seconds",
            num_round,
            (round_obj.round_end - round_obj.round_start).seconds,
        )

        for service in services:
            output = ""
            if randint(0, 1) == 1:
                result = True
                reason = CHECK_SUCCESS_TEXT
                output = "Some random output of a command"
            else:
                result = False
                output = "Errored output"
                reason = choice([CHECK_FAILURE_TEXT, CHECK_TIMED_OUT_TEXT])

            command = "ping -c 1 127.0.0.1"
            check = Check(round=round_obj, service=service)
            check.finished(result, reason, output, command)
            session.add(check)
    session.commit()


def simulate_injects() -> None:
    """Populate the database with example inject data."""

    num_injects = randint(5, 15)
    logger.info("Simulating %s Injects", num_injects)
    for _ in range(num_injects):
        template = Template(
            title="Journey to Mordor",
            scenario="You have the ring, take it to be destroyed!",
            deliverable="Word document in at least 3 volumes with journalistic evidence of each step of your journey and the destruction of the ring.",
            score=100,
            start_time=datetime.now() - timedelta(hours=randint(0, 24), minutes=randint(0, 60)),
            end_time=datetime.now() + timedelta(hours=randint(0, 24), minutes=randint(0, 60)),
        )
        session.add(template)

        for team in Team.get_all_blue_teams():
            inject = Inject(
                team=team,
                template=template,
            )
            inject.score = randint(0, 100)
            inject.status = choice(["Draft", "Submitted", "Graded"])
            session.add(inject)
        session.commit()


def simulate_notifications(team_ids: list[int]) -> None:
    """Populate the database with example notification data."""

    num_notifications = randint(50, 100)
    logger.info("Simulating %s Notifications", num_notifications)
    for _ in range(num_notifications):
        notification = Notification(
            message="Test Notification",
            target="/admin/notifications",
        )
        notification.is_read = bool(randint(0, 1))
        notification.team_id = choice(team_ids)
        session.add(notification)
        session.commit()


def simulate_flags(team_ids: list[int]) -> None:
    """Populate the database with example flag and solve data."""

    num_flags = randint(10, 20)
    logger.info("Simulating %s Flags", num_flags)
    for _ in range(num_flags):
        flag = Flag(
            start_time=datetime.now() - timedelta(minutes=randint(0, 60)),
            end_time=datetime.now() + timedelta(minutes=randint(0, 60)),
        )
        flag.platform = choice(["nix", "windows"])
        flag.dummy = choice([False, True])
        flag.type = choice(["file", "pipe", "net", "reg"])
        flag.perm = choice(["user", "root"])
        flag.data = {"path": "/tmp/flag", "content": "hi"}
        session.add(flag)
        session.commit()

        for team_id in sample(team_ids, randint(1, len(team_ids))):
            solve = Solve(
                flag=flag,
                host="127.0.0.1",
                team_id=team_id,
            )
            session.add(solve)
            session.commit()


def populate_example_data() -> None:
    """Generate example data for a development environment."""

    simulate_rounds()
    simulate_injects()
    team_ids = [id_[0] for id_ in session.query(Team.id).all()]
    simulate_notifications(team_ids)
    simulate_flags(team_ids)


def parse_args() -> argparse.Namespace:
    """Parse arguments and apply environment variable overrides."""

    parser = build_argument_parser()
    args = parser.parse_args()
    apply_environment_overrides(args)
    return args


def main() -> None:
    """Entry-point for the setup script."""

    args = parse_args()

    logger.info("Starting Setup v.%s", version)
    ensure_database_state(args.overwrite_db)
    load_competition_configuration()
    create_default_settings()

    if args.example:
        populate_example_data()


if __name__ == "__main__":
    main()

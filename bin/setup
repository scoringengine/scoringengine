#!/usr/bin/env python

from random import randint

import optparse
import os

from scoring_engine.models.service import Service
from scoring_engine.models.round import Round
from scoring_engine.models.check import Check
from scoring_engine.models.setting import Setting
from scoring_engine.db import session, init_db, delete_db, verify_db_ready
from scoring_engine.config import config
from scoring_engine.competition import Competition
from scoring_engine.logger import logger
from scoring_engine.version import version
from scoring_engine.engine.basic_check import CHECK_SUCCESS_TEXT, CHECK_FAILURE_TEXT, CHECK_TIMED_OUT_TEXT


parser = optparse.OptionParser()
parser.add_option('--overwrite-db', action="store_true", default=False)
parser.add_option('--example', action="store_true", default=False)

options, arguments = parser.parse_args()

# In order to handle docker-compose usability
# we have a check to see if the SCORINGENGINE_EXAMPLE environment
# variable is true. If it is, we want to populate
# the db with example data
if 'SCORINGENGINE_EXAMPLE' in os.environ and os.environ['SCORINGENGINE_EXAMPLE'].lower() == 'true':
    options.overwrite_db = True
    options.example = True

# If the SCORINGENGINE_OVERWRITE_DB environment variable is set
# we want to delete any previous data in the db
if 'SCORINGENGINE_OVERWRITE_DB' in os.environ and os.environ['SCORINGENGINE_OVERWRITE_DB'].lower() == 'true':
    options.overwrite_db = os.environ['SCORINGENGINE_OVERWRITE_DB'] == 'true'

logger.info("Starting Setup v.{0}".format(version))

if not options.overwrite_db:
    if verify_db_ready(session):
        logger.error("Exiting script and not overwriting db...must use --overwrite-db to overwrite data.")
        exit()
    else:
        # Database doesn't exist, so continuing on to setup script
        logger.debug("Database doesn't exist yet...")

logger.info("Setting up DB")
delete_db(session)
init_db(session)

competition_config_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), "competition.yaml")
sample_competition_str = open(competition_config_file, 'r').read()
competition = Competition.parse_yaml_str(sample_competition_str)
competition.save(session)

about_content = '''
<h4>Use the following credentials to login</h4>
<ul>
    <li>whiteteamuser:testpass</li>
    <li>redteamuser:testpass</li>
    <li>team1user1:testpass</li>
    <li>team2user1:testpass</li>
    <li>...</li>
    <li>team10user1:testpass</li>
</ul>'''

welcome_content = '''
<div class="row">
    <h1 class="text-center">Diamond Sponsors</h1>
</div>
<div class="row">
    <div class="col-xs-12 col-md-4">
        <div class="card">
            <img class='center-block' src="static/images/logo-placeholder.jpg" alt="sponsor image placeholder">
        </div>
    </div>
    <div class="col-xs-12 col-md-4">
        <div class="card">
            <img class='center-block' src="static/images/logo-placeholder.jpg" alt="sponsor image placeholder">
        </div>
    </div>
    <div class="col-xs-12 col-md-4">
        <div class="card">
            <img class='center-block' src="static/images/logo-placeholder.jpg" alt="sponsor image placeholder">
        </div>
    </div>
</div>
<div class="row">
    <h1 class="text-center">Platinum Sponsors</h1>
</div>
<div class="row">
    <div class="col-xs-12 col-md-4">
        <div class="card">
            <img class='center-block' src="static/images/logo-placeholder.jpg" alt="sponsor image placeholder">
        </div>
    </div>
    <div class="col-xs-12 col-md-4">
        <div class="card">
            <img class='center-block' src="static/images/logo-placeholder.jpg" alt="sponsor image placeholder">
        </div>
    </div>
    <div class="col-xs-12 col-md-4">
        <div class="card">
            <img class='center-block' src="static/images/logo-placeholder.jpg" alt="sponsor image placeholder">
        </div>
    </div>
</div>
<div class="row">
    <h1 class="text-center">Gold Sponsors</h1>
</div>
<div class="row">
    <div class="col-xs-12 col-md-4">
        <div class="card">
            <img class='center-block' src="static/images/logo-placeholder.jpg" alt="sponsor image placeholder">
        </div>
    </div>
    <div class="col-xs-12 col-md-4">
        <div class="card">
            <img class='center-block' src="static/images/logo-placeholder.jpg" alt="sponsor image placeholder">
        </div>
    </div>
    <div class="col-xs-12 col-md-4">
        <div class="card">
            <img class='center-block' src="static/images/logo-placeholder.jpg" alt="sponsor image placeholder">
        </div>
    </div>
</div>
'''

logger.info("Creating the default Settings")
about_page_setting = Setting(name='about_page_content', value=about_content)
session.add(about_page_setting)
session.add(Setting(name='welcome_page_content', value=welcome_content))
session.add(Setting(name='round_time_sleep', value=config.round_time_sleep))
session.add(Setting(name='worker_refresh_time', value=config.worker_refresh_time))
session.add(Setting(name='blue_team_update_hostname', value=True))
session.add(Setting(name='blue_team_update_port', value=True))
session.add(Setting(name='blue_team_update_account_usernames', value=True))
session.add(Setting(name='blue_team_update_account_passwords', value=True))
session.add(Setting(name='blue_team_view_check_output', value=True))
session.commit()

if options.example:
    num_rounds = randint(2000, 2550)
    logger.info("Simulating " + str(num_rounds) + " rounds")
    for num_round in range(1, num_rounds + 1):
        round_obj = Round(number=num_round)
        services = session.query(Service).all()
        for service in services:
            output = ''
            if randint(0, 1) == 1:
                result = True
                reason = CHECK_SUCCESS_TEXT
                output = 'Some random output of a command'
            else:
                result = False
                output = 'Errored output'
                if randint(0, 1) == 1:
                    reason = CHECK_FAILURE_TEXT
                else:
                    reason = CHECK_TIMED_OUT_TEXT

            command = 'ping -c 1 127.0.0.1'
            check = Check(round=round_obj, service=service)
            check.finished(result, reason, output, command)
            session.add(check)
    session.commit()
